@{
    ViewData["Title"] = "AboutUs";
    Layout = "/Views/Shared/HomeLayout.cshtml";
}
<h2 style="font-size:13px"><span></span>当前位置:首页 > 关于我们</h2>
<h2><img src="~/images/timg (3ss).jpg" style="width:670px;height:300px" /></h2>
<br />
<h3>ASP.NET Core 简介</h3>
<br />
<p style="font-size:13px">
    2017/09/03 作者  Rick Anderson  olprod
    作者：Daniel RothRick Anderson 和 Shaun Luttin
    ASP.NET Core 是一个跨平台的高性能开源框架，用于生成基于云且连接 Internet 的新式应用程序。 使用 ASP.NET Core，可以：
    生成 Web 应用和服务、IoT 应用和移动后端。
    在 Windows、macOS 和 Linux 上使用喜爱的开发工具。
    部署到云或本地
    在 .NET Core 或 .NET Framework 上运行。
    为何使用 ASP.NET Core？
    数百万开发人员在使用（并继续使用）ASP.NET 来创建 Web 应用。 ASP.NET Core 是重新设计的 ASP.NET，对体系结构进行了更改，提供更精简的模块化框架。
    ASP.NET Core 具有如下优点：
    生成 Web UI 和 Web API 的统一场景。
    新式客户端框架与开发工作流的集成。
    基于环境的云就绪配置系统。
    内置依赖项注入。
    轻型高性能模块化 HTTP 请求管道。
    能够在 IIS 上进行托管或在自己的进程中进行自托管。
    可以在 .NET Core 上运行，支持真正的并行应用版本控制。
    简化新式 Web 开发的工具。
    能够在 Windows、macOS 和 Linux 进行生成和运行。
    开源和关注社区。
    ASP.NET Core 完全作为 NuGet 包的一部分提供。 这可优化应用，使其只包含需要的 NuGet 包。 较小的应用图面区域的优势包括：提升安全性、减少维护和提高性能。
    使用 ASP.NET Core MVC 生成 Web API 和 Web UI
    ASP.NET Core MVC 提供帮助生成 Web API 和 Web 应用的功能：
    Model-View-Controller (MVC) 模式 使 Web API 和 Web 应用可测试。
    Razor 页面（2.0 中的新增功能）是基于页面的编程模式，它使 Web UI 的生成更加简单高效。
    Razor 语法为 Razor 页面和 MVC 视图提供高效的语言。
    标记帮助程序使服务器端代码可以在 Razor 文件中参与创建和呈现 HTML 元素。
    内置的多数据格式和内容协商支持使 Web API 可访问多种客户端，包括浏览器和移动设备。
    模型绑定自动将数据从 HTTP 请求映射到操作方法参数。
    模型验证自动执行客户端和服务器端验证。
    客户端开发
    ASP.NET Core 经过精心设计，可与多种客户端框架无缝集成，包括 AngularJS、KnockoutJS 和 Bootstrap。 有关详细信息，请参阅客户端开发。
    后续步骤
    有关更多信息，请参见以下资源：
    ASP.NET Core 教程
    ASP.NET Core 基础知识
    每周的 ASP.NET Community Standup 介绍团队的进度和计划，包括新的博客和第三方软件。
</p>
<br />
